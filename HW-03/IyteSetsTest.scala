import java.io.PrintWriter

/**
 * Created by Murat on 18.11.2014.
 */
object IyteSetsTest extends App{

  /*
  val (min, max) = (0,10000);
  val ordered = List(6, 10, 108, 139, 140, 142, 156, 189, 227, 235, 262, 277, 283, 285, 337, 343, 368, 375, 393, 399, 481, 488, 510, 514, 536, 548, 555, 557, 571, 576, 600, 640, 662, 663, 676, 712, 729, 731, 745, 777, 783, 832, 851, 853, 870, 879, 885, 901, 910, 931, 948, 1036, 1037, 1038, 1040, 1041, 1045, 1120, 1124, 1127, 1130, 1163, 1178, 1217, 1279, 1289, 1320, 1383, 1469, 1484, 1488, 1499, 1507, 1520, 1523, 1526, 1532, 1552, 1557, 1614, 1618, 1656, 1661, 1667, 1670, 1732, 1757, 1764, 1778, 1794, 1818, 1843, 1851, 1891, 1899, 1917, 1922, 1926, 1943, 1956, 1970, 1982, 1993, 2020, 2036, 2063, 2080, 2081, 2137, 2164, 2175, 2190, 2217, 2261, 2268, 2305, 2311, 2318, 2325, 2335, 2336, 2356, 2358, 2366, 2377, 2382, 2394, 2459, 2478, 2509, 2550, 2589, 2590, 2657, 2664, 2695, 2699, 2728, 2753, 2798, 2816, 2860, 2867, 2889, 2901, 2922, 2944, 2950, 2977, 3066, 3079, 3088, 3101, 3115, 3123, 3144, 3147, 3157, 3171, 3212, 3225, 3254, 3276, 3300, 3317, 3353, 3386, 3453, 3460, 3497, 3498, 3509, 3527, 3533, 3572, 3581, 3652, 3665, 3710, 3714, 3718, 3741, 3796, 3830, 3833, 3866, 3869, 3908, 3909, 3963, 3990, 4001, 4025, 4054, 4083, 4108, 4147, 4162, 4174, 4183, 4189, 4203, 4227, 4242, 4267, 4287, 4315, 4348, 4367, 4375, 4408, 4424, 4451, 4478, 4490, 4511, 4536, 4542, 4555, 4559, 4567, 4573, 4600, 4606, 4625, 4638, 4650, 4657, 4664, 4709, 4768, 4796, 4813, 4823, 4827, 4845, 4899, 4912, 4922, 4929, 4930, 4955, 5009, 5077, 5132, 5138, 5160, 5172, 5193, 5195, 5222, 5230, 5284, 5290, 5297, 5370, 5372, 5389, 5407, 5408, 5427, 5465, 5490, 5496, 5505, 5602, 5603, 5645, 5663, 5680, 5736, 5740, 5775, 5782, 5810, 5835, 5897, 5905, 5941, 5943, 5954, 5982, 5984, 6028, 6030, 6032, 6050, 6054, 6100, 6165, 6171, 6175, 6205, 6236, 6304, 6315, 6342, 6353, 6356, 6361, 6455, 6504, 6506, 6507, 6516, 6541, 6559, 6560, 6568, 6573, 6578, 6581, 6593, 6611, 6629, 6653, 6705, 6717, 6729, 6757, 6794, 6805, 6815, 6816, 6903, 6909, 6913, 6940, 6948, 6976, 6982, 7027, 7033, 7061, 7065, 7084, 7110, 7119, 7120, 7124, 7134, 7169, 7231, 7255, 7281, 7320, 7409, 7410, 7468, 7469, 7516, 7532, 7617, 7622, 7632, 7636, 7688, 7748, 7753, 7759, 7866, 7887, 7898, 7925, 7980, 7990, 8031, 8036, 8042, 8057, 8090, 8093, 8106, 8127, 8146, 8151, 8177, 8193, 8205, 8249, 8278, 8289, 8290, 8292, 8301, 8310, 8320, 8344, 8356, 8392, 8430, 8432, 8457, 8463, 8473, 8478, 8489, 8551, 8565, 8588, 8633, 8645, 8651, 8668, 8684, 8707, 8715, 8720, 8750, 8757, 8764, 8771, 8788, 8796, 8798, 8818, 8819, 8822, 8831, 8846, 8850, 8885, 8904, 8914, 8939, 8954, 8973, 8994, 8997, 9007, 9014, 9020, 9023, 9024, 9025, 9049, 9071, 9103, 9112, 9124, 9179, 9182, 9183, 9185, 9195, 9224, 9254, 9263, 9266, 9286, 9291, 9309, 9344, 9360, 9371, 9388, 9405, 9426, 9440, 9443, 9449, 9460, 9484, 9486, 9515, 9564, 9572, 9573, 9576, 9588, 9612, 9622, 9630, 9642, 9655, 9661, 9683, 9685, 9686, 9689, 9691, 9696, 9732, 9780, 9793, 9799, 9813, 9818, 9840, 9853, 9864, 9866, 9870, 9885, 9886, 9890, 9909, 9916, 9961, 9993);
  val random = List(7770, 6140, 1799, 6348, 1872, 6560, 3562, 2869, 4513, 3163, 7972, 5261, 3158, 1644, 981, 9042, 8997, 136, 6947, 4583, 5272, 1128, 1050, 9860, 619, 8196, 8146, 8028, 3067, 7876, 1807, 8591, 9966, 5834, 5635, 5462, 4680, 947, 9661, 5148, 6469, 3803, 6, 956, 4969, 7594, 3710, 3528, 8753, 856, 7872, 2486, 7595, 2319, 7529, 9583, 6406, 3776, 9439, 744, 372, 8302, 3636, 4974, 4600, 611, 5780, 889, 7461, 3921, 401, 9180, 862, 8448, 4870, 9489, 1243, 242, 2261, 8659, 824, 1350, 6499, 5646, 855, 8602, 2311, 395, 6488, 4173, 5131, 5249, 8777, 9923, 7954, 6691, 2095, 4994, 4037, 8676, 130, 6894, 3274, 1469, 5706, 5230, 1148, 8962, 801, 763, 3416, 3687, 9496, 6925, 1224, 3089, 4174, 7906, 6724, 9574, 4952, 4147, 9334, 6480, 2267, 9169, 2133, 7915, 2414, 3989, 9112, 4069, 6038, 9325, 4253, 318, 879, 4382, 4484, 5828, 7447, 4325, 6473, 5773, 9920, 4556, 9872, 7741, 8841, 7578, 9573, 7391, 980, 6402, 8336, 9684, 4975, 6162, 7309, 3208, 5257, 3734, 4962, 676, 4440, 1268, 2552, 3465, 184, 4366, 7755, 2601, 368, 7202, 2059, 5788, 8372, 9770, 4239, 4817, 6623, 4537, 159, 4231, 3217, 3712, 3252, 7177, 9073, 3508, 9699, 2532, 163, 7443, 7517, 5214, 6881, 1904, 9035, 9369, 3423, 9246, 684, 5033, 2417, 9363, 2733, 7194, 7282, 9352, 4732, 9519, 6563, 7837, 8515, 3344, 3954, 42, 2833, 1537, 3584, 6962, 1228, 2609, 9063, 8662, 2230, 2238, 9705, 5372, 5271, 143, 7242, 2522, 1426, 851, 3765, 3452, 9667, 5722, 2242, 7117, 1097, 969, 848, 2020, 6907, 9769, 1585, 8157, 175, 5180, 6820, 859, 183, 3767, 2464, 8531, 5988, 1238, 4052, 6312, 8487, 7976, 2151, 5202, 6147, 5292, 742, 3875, 8219, 280, 6487, 8180, 737, 6912, 5464, 6216, 1242, 5436, 7318, 396, 8105, 666, 7347, 9878, 6183, 8272, 5373, 9614, 1203, 4515, 6849, 5927, 1917, 5486, 9960, 1193, 6953, 1653, 6410, 394, 4005, 3446, 8899, 3473, 6995, 3911, 9732, 8227, 2990, 2125, 250, 1320, 1169, 8145, 2081, 5362, 4932, 2363, 663, 5507, 7498, 1679, 3509, 5064, 5563, 9095, 4482, 3144, 2831, 5600, 2500, 7849, 8398, 4138, 1, 5060, 7524, 580, 3536, 9882, 6518, 6380, 2592, 4135, 4538, 1194, 3371, 7504, 8362, 5487, 454, 7523, 7527, 5239, 8263, 4818, 2139, 3579, 1579, 8632, 8127, 9029, 5197, 4514, 4785, 6056, 7452, 1290, 172, 5702, 8163, 7545, 9598, 1669, 1770, 8179, 8005, 9994, 4242, 7501, 7978, 7199, 8437, 3537, 6020, 4177, 7031, 9457, 9121, 174, 1566, 9080, 755, 284, 7064, 1293, 6546, 6716, 7530, 9823, 5587, 4557, 3591, 3847, 958, 7710, 5402, 4114, 9336, 7089, 7556, 2907, 1610, 8670, 5442, 2376, 7858, 8996, 7580, 1107, 2576, 9411, 871, 7555, 1813, 6100, 7392, 6355, 3749, 77, 5284, 9026, 7535, 9656, 3686, 8799, 2309, 6054, 9871, 8367, 3263, 1632, 1462, 4820, 5631, 3981, 6484, 9472, 8620, 4808, 489, 8076, 167, 6034, 1752, 6862, 6071, 3550, 2300, 4524, 5921, 2951, 5880, 991, 5913, 6405, 3087, 204, 3032, 1117, 3015, 5463, 2184, 5517, 207, 1147, 7698, 4085, 8050, 6212, 6816, 9844, 9051, 9883, 2121, 180, 4647, 8167, 7851, 8420, 8277, 7401, 3170, 6018, 2888, 2895, 5379, 9910);

  val set = new IyteMutableSet();

  for(x:Int <- random){
    set.add(x);
  }

  println(set.toString());

  var counter : Int = 0;

  for(x:Int <- min to max){
    if(random.contains(x) != set.contains(x)){
      println("Fail #" + counter);
      counter += 1;
    }
  }

  */


  /*
  var startTime : Long = 0;
  var endTime : Long = 0;

  val w = new PrintWriter("D:\\Murat\\Desktop\\ceng316\\mutableAddTest.txt")

  //add test with 1000000 call
  val testList : List[Int] = scala.util.Random.shuffle((0 until 1000000).toList);
  var mSet = IyteMutableSet();
  var i = 0;

  for( integer <- testList){
    startTime = System.nanoTime();
    mSet.add(integer);
    endTime = System.nanoTime();

    w.println(i + " " + (endTime - startTime) + " Added integer:" + integer);
    i+=1;
  }
  */

  /*
  var startTime : Long = 0;
  var endTime : Long = 0;

  //contains test
  val w2 = new PrintWriter("D:\\Murat\\Desktop\\ceng316\\mutableContainsTest.txt");

  //test prep
  val mSet2 = IyteMutableSet();

  for( i:Int <- 0 until 1000000 by 2){
    mSet2.add(i);
  }

  for( i: Int <- 0 until 1000000){
    startTime = System.nanoTime();
    val res = mSet2.contains(i);
    endTime = System.nanoTime();

    w2.println(i + " " + (endTime - startTime) + " " + res);
  }
  */

  /*
  var startTime : Long = 0;
  var endTime : Long = 0;

  //contains test
  val w3 = new PrintWriter("D:\\Murat\\Desktop\\ceng316\\immutableContainsTest.txt");

  //test prep
  val mSet3 = IyteImmutableSet((0 until 1000000 by 2).toArray);

  for( i: Int <- 0 until 1000000){
    startTime = System.nanoTime();
    val res = mSet3.contains(i);
    endTime = System.nanoTime();

    w3.println(i + " " + (endTime - startTime) + " " + res);

    if(i%2 == 0 && res == false) println("TEST FAILED");
  }
  */


  /*
  var startTime : Long = 0;
  var endTime : Long = 0;

  //contains test
  val w4 = new PrintWriter("D:\\Murat\\Desktop\\ceng316\\immutableAddTest.txt");

  //test prep
  val testList : List[Int] = scala.util.Random.shuffle((0 until 1000000).toList);
  var mSet4 = IyteImmutableSet();
  var i = 0;

  for( integer <- testList){
    startTime = System.nanoTime();
    mSet4 = mSet4.add(integer);
    endTime = System.nanoTime();

    w4.println(i + " " + (endTime - startTime));
    i+=1;
  }
  */

}
